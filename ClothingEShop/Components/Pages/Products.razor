@page "/products"
@using ClothingEShop.Models
@using ClothingEShop.Services
@inject IProductService ProductService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Products - Clothing E-Shop</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>All Products</h1>
                <a href="/products/create" class="btn btn-success">
                    <i class="bi bi-plus-lg"></i> Add New Product
                </a>
            </div>

            <!-- Search and Filter -->
            <div class="row mb-4">
                <div class="col-md-8">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search products by name or description..." 
                               @bind="searchTerm" @onkeypress="HandleKeyPress" />
                        <button class="btn btn-primary" type="button" @onclick="SearchProducts">
                            <i class="bi bi-search"></i> Search
                        </button>
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="btn btn-outline-danger" type="button" @onclick="ClearSearch">
                                <i class="bi bi-x-lg"></i> Clear
                            </button>
                        }
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="text-muted">
                        Found @(products?.Count ?? 0) product(s)
                    </div>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading products...</span>
                    </div>
                </div>
            }
            else if (products == null || !products.Any())
            {
                <div class="alert alert-info text-center py-5">
                    <i class="bi bi-box-seam display-1 text-muted"></i>
                    <h3 class="mt-3">No Products Found</h3>
                    <p class="lead">
                        @(string.IsNullOrEmpty(searchTerm) 
                            ? "You haven't added any products yet." 
                            : $"No products match your search for '{searchTerm}'.")
                    </p>
                    @if (string.IsNullOrEmpty(searchTerm))
                    {
                        <a href="/products/create" class="btn btn-success btn-lg">
                            <i class="bi bi-plus-lg"></i> Add Your First Product
                        </a>
                    }
                    else
                    {
                        <button class="btn btn-secondary" @onclick="ClearSearch">
                            <i class="bi bi-arrow-left"></i> Show All Products
                        </button>
                    }
                </div>
            }
            else
            {
                <!-- Products Grid -->
                <div class="row">
                    @foreach (var product in products)
                    {
                        <div class="col-lg-4 col-md-6 mb-4">
                            <div class="card h-100 shadow-sm product-card">
                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                {
                                    <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" 
                                         style="height: 250px; object-fit: cover; cursor: pointer;" 
                                         @onclick="() => ViewProduct(product.Id)" />
                                }
                                else
                                {
                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center" 
                                         style="height: 250px; cursor: pointer;" @onclick="() => ViewProduct(product.Id)">
                                        <i class="bi bi-image text-muted" style="font-size: 4rem;"></i>
                                    </div>
                                }
                                
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@product.Name</h5>
                                    <p class="card-text text-muted flex-grow-1">
                                        @(product.Description.Length > 100 
                                            ? product.Description.Substring(0, 100) + "..." 
                                            : product.Description)
                                    </p>
                                    
                                    <div class="mt-auto">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <span class="h4 text-success mb-0">${@product.Price:F2}</span>
                                            <small class="text-muted">
                                                Added @product.CreatedAt.ToString("MMM dd, yyyy")
                                            </small>
                                        </div>
                                        
                                        <div class="d-grid gap-2">
                                            <div class="btn-group">
                                                <button class="btn btn-primary" @onclick="() => ViewProduct(product.Id)">
                                                    <i class="bi bi-eye"></i> View Details
                                                </button>
                                                <button class="btn btn-outline-secondary" @onclick="() => EditProduct(product.Id)">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => ShowDeleteConfirmation(product.Id, product.Name)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete "<strong>@productToDeleteName</strong>"?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmation">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                        <i class="bi bi-trash"></i> Delete Product
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .product-card {
        transition: transform 0.2s ease-in-out;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
    }
</style>

@code {
    private List<Product>? products;
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private bool showDeleteModal = false;
    private int productToDeleteId = 0;
    private string productToDeleteName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        try
        {
            products = await ProductService.GetAllProductsAsync();
        }
        catch (Exception ex)
        {
            // Handle error appropriately - could show error message to user
            products = new List<Product>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchProducts()
    {
        isLoading = true;
        try
        {
            products = await ProductService.SearchProductsAsync(searchTerm);
        }
        catch (Exception ex)
        {
            products = new List<Product>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await LoadProducts();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchProducts();
        }
    }

    private void ViewProduct(int productId)
    {
        Navigation.NavigateTo($"/products/{productId}");
    }

    private void EditProduct(int productId)
    {
        Navigation.NavigateTo($"/products/edit/{productId}");
    }

    private void ShowDeleteConfirmation(int productId, string productName)
    {
        productToDeleteId = productId;
        productToDeleteName = productName;
        showDeleteModal = true;
    }

    private void HideDeleteConfirmation()
    {
        showDeleteModal = false;
        productToDeleteId = 0;
        productToDeleteName = string.Empty;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (await ProductService.DeleteProductAsync(productToDeleteId))
            {
                await LoadProducts(); // Refresh the list
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            HideDeleteConfirmation();
        }
    }
}